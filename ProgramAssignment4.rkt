#lang racket
(define (up-to-first-number lst)
  (takef lst (negate number?)))
(define (find-loc lst atm)
  (let indexcounter ((lst lst)
             (index 0))
    (cond ((empty? lst) #f)
          ((equal? (first lst) atm) index)
          (else (indexcounter (rest lst) (add1 index))))))
(define (length l)
  (if (null? l)
      0
     (+ 1 (length (cdr l)))))
(define (lsta)
  '(1 2 3))
(define (lstb)
  '(a b c d))
(define (longer-list lsta lstb)
  (if (list? lsta)
      (list? lstb)
        (cond ((= (length lsta) (length lstb)) #t)
              ((< (length lsta) (length lstb) (lstb))
              ((> (length lsta) (length lstb) (lsta)))))))

